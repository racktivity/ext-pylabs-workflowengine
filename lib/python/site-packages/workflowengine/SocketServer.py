import pickle

from concurrence import Tasklet, Message
from concurrence.io import BufferedStream, Socket

from pymonkey import q

from Exceptions import WFLException

#def alog(*l):
#    f=file('/tmp/l','a')
#    f.write('%r\n'%l)
#    f.close()

class SocketTask(object):
    '''
    The SocketTask starts a tasklet that listens for incomming connections. For
    each request a second tasklet will be started is created to process the
    request. This tasklet will read a serialized dict, call the action and
    reply with a return serialized dict.
    '''
    def __init__(self, port):
        self.port=port
        self.tasklet_server=None

    def request(self,sc):
        stream = BufferedStream(sc)
        f=stream.file()
        data=pickle.load(f)
        try:
            r=q.workflowengine.actionmanager.startRootobjectAction(data['rootobjectname'],data['actionname'],data['params'],data['executionparams'],data['jobguid'])
            out={'id':data['id'], 'error':False, 'return':r}
        except Exception, e:
            out={'id':data['id'], 'error':True, 'exception':WFLException.create(e)}
        msg=pickle.dumps(out,-1)
        stream.writer.write_bytes(msg)
        stream.writer.flush()
        stream.close()

    def serve(self):
        sl = Socket.new()
        sl.set_reuse_address(1)
        sl.bind(('', self.port))
        sl.listen()
        while True:
            sc = sl.accept()
            Tasklet.new(self.request)(sc)

    def start(self):
        self.tasklet_server = Tasklet.new(self.serve)()

    def stop(self):
        pass

#
