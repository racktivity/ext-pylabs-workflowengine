#!/opt/qbase3/bin/python
#vim:fdl=0:
if __name__=='__main__':
    from pymonkey.InitBase import q
else:
    from pymonkey import q

import uuid

from concurrence import Tasklet, Message, dispatch


import osis
import osis.client
from osis.model.serializers import ThriftSerializer
from osis.client.local import LocalTransport
from osis.client.xmlrpc import XMLRPCTransport
import osis.store.OsisDB
import osis.store.OsisConnection
import osis.store.PG8000Connection

from workflowengine.Exceptions import WFLException

#----------------------------------------------------------
# Concurrence pg query task
#----------------------------------------------------------

class MSG_QUERY_CALL(Message):
    pass

class MSG_QUERY_RETURN(Message):
    pass

class MSG_QUERY_EXCEPTION(Message):
    pass

def query_task():
    print "pg8000_query_task start, permanent connection to pg"
    c=osis.store.PG8000Connection.PG8000Connection('127.0.0.1','osis','qbase','rooter')
    print "pg8000_query_task receive loop"
    for msg, args, kwargs in Tasklet.receive():
        caller = args[0]
        args = args[1:]
        if msg.match(MSG_QUERY_CALL):
            try:
                print "pg8000_query_task call",caller,args,kwargs
                q.logger.log("***********PG800sqlexecute",args,kwargs)
                r=c.sqlexecute(*args, **kwargs)
                q.logger.log("************recv")
                print "pg8000_query_task return",r
            except Exception, e:
                print "pg8000_query_task Exception",e
                MSG_QUERY_EXCEPTION.send(caller)(e)
            else:
                MSG_QUERY_RETURN.send(caller)(r)

query_tasklet = None

#----------------------------------------------------------
# Osis Override
#----------------------------------------------------------

class ConcurrencePG8000Connection:
    def __init__(self):
        pass
    def sqlexecute(self, *args, **kwargs):
        print "sqlexecute",args,kwargs
        MSG_QUERY_CALL.send(query_tasklet)(Tasklet.current(), *args, **kwargs)
        (msg, args, kwargs) = Tasklet.receive().next()
        r=args[0]
        if msg.match(MSG_QUERY_RETURN):
            print "ConcurrencePG8000Connection.sqlexecute receive: ",r
            return r
        elif msg.match(MSG_QUERY_EXCEPTION):
            print "ConcurrencePG8000Connection.sqlexecute execpt: ",r
            raise r

class OsisConcurrenceConnection(osis.store.OsisConnection.OsisConnectionGeneric):
    def __init__(self):
        osis.store.OsisConnection.OsisConnectionGeneric.__init__(self)
        self._dbConn = ConcurrencePG8000Connection()
    def connect(self, ip, db, login, passwd):
        pass

def getConnection(self, name, usePG8000=True):
    print "getConnection",name
    return OsisConcurrenceConnection()

#----------------------------------------------------------
# DrpClient
#----------------------------------------------------------

class DRPClient():
    __shared_state = {}
    def __init__(self):
        self.__dict__ = self.__shared_state
        if not hasattr(self, 'initialized'):
            self.__initialize()
            setattr(self, 'initialized', True)
    def __initialize(self):
        osis.init(q.system.fs.joinPaths(q.dirs.baseDir, 'libexec','osis'))
        c = osis.client.OsisConnection(LocalTransport('/opt/qbase3/apps/applicationserver/services/osis_service/tasklets'), ThriftSerializer)
        self.__connection = c
        from osis import ROOTOBJECT_TYPES as types
        for type in types.itervalues():
            name = getattr(type, 'OSIS_TYPE_NAME', type.__name__.lower())
            setattr(self, name, getattr(self.__connection, name))

#----------------------------------------------------------
# Init to be called by the main_tasklet
#----------------------------------------------------------

def init():
    global query_tasklet
    query_tasklet=Tasklet.new(query_task)()
    osis.store.OsisDB.OsisDB.getConnection=getConnection
    q.drp=DRPClient()

#----------------------------------------------------------
# Drp test
#----------------------------------------------------------

def test():
    print "test maintasklet"
    init()
    print q
    print q.drp
    print q.drp.clouduser.get('1')

if __name__=='__main__':
    dispatch(test)

