print "IMPORT OK"
import sys, traceback

from signal import signal, SIGTERM

from pymonkey.InitBaseCore import q, i

from pymonkey.tasklets import TaskletsEngine
#from pymonkey.logging.logtargets.LogTargetScribe import LogTargetScribe

q.application.appname = "workflowengine"

from concurrence import Tasklet, Message, dispatch

from DRPClient import DRPTask
from AgentController import AgentControllerTask

from Exceptions import WFLException
from WFLLogTargets import WFLJobLogTarget

from SocketServer import SocketTask

import  ConcurrenceSocket
ConcurrenceSocket.install()

def main_tasklet():
    initSuccessFile = q.system.fs.joinPaths(q.dirs.varDir, 'log', 'workflowengine.initSuccess')
    initFailedFile = q.system.fs.joinPaths(q.dirs.varDir, 'log', 'workflowengine.initFailed')

    try:
        q.logger.logTargetAdd(WFLJobLogTarget())
        #q.logger.logTargetAdd(LogTargetScribe())

        config = i.config.workflowengine.getConfig('main')

        socket_task = SocketTask(int(config['port']))
        drp_task = DRPTask(config['osis_address'], config['osis_service'])
        hostname = config['hostname'] if 'hostname' in config and config['hostname'] else config['xmppserver']
        ac_task = AgentControllerTask(config['agentcontrollerguid'], config['xmppserver'], hostname, config['password'])

    except Exception, e:
        q.logger.log("[WorkflowEngine] Initialization failed: " + str(e), 1)
        traceback.print_exc()
        q.system.fs.createEmptyFile(initFailedFile)
        sys.exit(-1)
    else:
        q.system.fs.createEmptyFile(initSuccessFile)

        #SETUP THE SIGNAL HANDLER: CLOSE THE SOCKET ON EXIT
        def sigterm_received():
            q.logger.log('Received SIGTERM: shutting down.')
            socket_task.stop()
            sys.exit(-SIGTERM)
        signal(SIGTERM, lambda signum, stack_frame: sigterm_received())

        #START THE TASKS AND REGISTER THEM IN THE Q-TREE
        socket_task.start()

        drp_task.start()
        drp_task.connectDRPClient(q.drp)

        ac_task.start()
        ac_task.connectWFLAgentController(q.workflowengine.agentcontroller)

        print "Ready !"

def main():
    #LOAD THE TASKLETS OUTSIDE THE DISPATCH: 10 TIMES FASTER.
    q.workflowengine.actionmanager.init()
    dispatch(main_tasklet)

